/*
 * <b>Copyright (c) 2016, Imagination Technologies Limited and/or its affiliated group companies
 *  and/or licensors. </b>
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted
 *  provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this list of conditions
 *      and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice, this list of
 *      conditions and the following disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific prior written
 *      permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 *  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 1
def versionBuild = 1

android {

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("petuniaCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("petuniaBuildToolsVersion")

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {

        applicationId globalConfiguration.getAt("petuniaApplicationId")

        minSdkVersion globalConfiguration.getAt("petuniaMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("petuniaTargetSdkVersion")

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}-${versionBuild}"

        testApplicationId globalConfiguration.getAt("petuniaTestApplicationId")

    }

    signingConfigs {

        release {
            keyAlias project.keyAlias
            keyPassword project.keyPassword
            storeFile file(project.storeFile)
            storePassword project.storePassword
        }
    }

    buildTypes {

        debug {

        }

        release {

            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->

                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replace("petunia",
                                "project4-${variant.versionName}")
                )
            }
        }
    }

    productFlavors {
        fake {
            applicationId 'com.imgtec.creator.project4.fake'
        }

        real {
            applicationId 'com.imgtec.creator.project4'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')

    def petuniaDependencies = rootProject.ext.petuniaDependencies

    compile petuniaDependencies.appCompat
    compile petuniaDependencies.appDesign

    compile petuniaDependencies.recyclerView
    compile petuniaDependencies.cardView
    compile petuniaDependencies.mpAndroidCharts

    compile petuniaDependencies.butterKnife
    apt petuniaDependencies.butterKnifeCompiler

    compile petuniaDependencies.slf4j
    compile petuniaDependencies.logback

    compile petuniaDependencies.dagger
    apt     petuniaDependencies.daggerCompiler
    compile petuniaDependencies.jsr250

    debugCompile petuniaDependencies.leakcanary
    releaseCompile petuniaDependencies.leakcanaryNoOp

    compile petuniaDependencies.okhttp
    compile petuniaDependencies.gson
    compile petuniaDependencies.okhttpLoggingInterceptor
    compile 'io.jsonwebtoken:jjwt:0.7.0'

    compile project(':di')

    testCompile 'junit:junit:4.12'
}
